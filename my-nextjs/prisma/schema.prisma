// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client"
  output   = "../app/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

//  model create

model User {
  id             String     @id @default(cuid())
  name           String?
  username       String?    @unique
  email          String?    @unique
  emailVerified  DateTime?
  image          String?
  bio            String?
  tweets         Tweet[]
  likes          Like[]     // âœ… added this line
  accounts       Account[]
  sessions       Session[]
  followers      Follower[] @relation("followers")
  following      Follower[] @relation("following")
  createdAt      DateTime   @default(now())
  updatedAt      DateTime   @updatedAt
}


model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?   @db.Text
  access_token      String?   @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?   @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// ------------------------
// TWEETS & RELATIONS
// ------------------------

model Tweet {
  id        String   @id @default(cuid())
  content   String
  image     String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  authorId  String
  author    User     @relation(fields: [authorId], references: [id], onDelete: Cascade)

  parentId  String?
  parent    Tweet?   @relation("TweetReplies", fields: [parentId], references: [id])
  replies   Tweet[]  @relation("TweetReplies")

  likes     Like[]
}

// ------------------------
// LIKES & FOLLOWERS
// ------------------------

model Like {
  id        String   @id @default(cuid())
  userId    String
  tweetId   String
  createdAt DateTime @default(now())

  user  User  @relation(fields: [userId], references: [id], onDelete: Cascade)
  tweet Tweet @relation(fields: [tweetId], references: [id], onDelete: Cascade)

  @@unique([userId, tweetId])
}

model Follower {
  id          String   @id @default(cuid())
  followerId  String
  followingId String
  createdAt   DateTime @default(now())

  follower  User @relation("followers", fields: [followerId], references: [id], onDelete: Cascade)
  following User @relation("following", fields: [followingId], references: [id], onDelete: Cascade)

  @@unique([followerId, followingId])
}